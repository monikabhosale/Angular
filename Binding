What Is Angular Data Binding?
Data binding allows Internet users to manipulate web page elements with the help of a web browser. 
It includes dynamic HTML and does not require complex programming.
 Data binding is used in web applications that contain interactive components such as forms, calculators, tutorials, and games. 
The incremental display of a webpage makes data binding convenient when pages contain an extensive amount of data. 

Angular uses the concept of two-way binding. Any UI element-related change is reflected in the corresponding and
 specific model state. Conversely, any model state changes reflect in the UI state. This ensures that the framework is able 
to connect the DOM to the Model data with the help of the controller.
Attribute Binding 
Attribute binding in Angular helps you bind to HTML attributes of elements in your template. This can be useful when you want to dynamically 
update the appearance or behavior of an element based on some condition. For example, you might want to hide an element unless a user is logged in, 
or change the color of an element based on its status. To bind to an attribute, you use the square brackets around the attribute name.


**************************************************************************************************************************************************************
Class Binding
Angular offers various ways to bind data to HTML elements. Class binding is one of them. It allows you to dynamically add or 
remove CSS classes from an element. This can be useful for applying styles based on certain conditions.

Style Binding
Style binding is a one-way data binding technique that can be used to set the value of a CSS property on an element. 
To use style binding, you first need to have a CSS property that you want to bind to an element. 
ngModel
Angular data binding is a two-way process: it can both send and receive data. This means that when you change something in your view, 
the model updates automatically, and vice versa. The ngModel directive makes this two-way data binding possible.

When you use the ngModel directive, you specify a property of the scope as the value of the directive. 
This tells Angular to create a two-way binding between the property and the input control.
 Any changes to the control are automatically reflected in the model, and any changes to the model are automatically reflected in the control.


****************************************************************************************************************************************************************
Types of Data Binding


Interpolation Binding  :-
Interpolation is a procedure that allows the user to bind a value to the user interface element. Interpolation binds the data one-way, 
which means that data moves in one direction from the components to HTML elements. 


Difference between One-way Binding and Two-way Binding

In this article, we will learn the concept of data binding in Angular. We will also explore its types & examine the differences between one-way binding and two-way binding in angular. 

Data binding is a way to synchronise the data between the model and view components automatically.
 AngularJS implements data-binding that treats the model as the single-source-of-truth in your application & for all the time, 
the view is a projection of the model. Unlike React, angular supports two-way binding. In this way, we can make the code more loosely coupled.
 Data binding can be categorized into 2 types, ie., One-way Binding & Two-way Binding.


*********************************************************************************************************************
One way binding:

In one-way binding, the data flow is one-directional.
This means that the flow of code is from typescript file to Html file.
In order to achieve a one-way binding, we used the property binding concept in Angular.
In property binding, we encapsulate the variable in Html with square brackets( [ ] ).
We will understand this concept through an example in order to make it more comprehensible.
***********************************************************************************************************************

One-way binding :-
In one-way binding, the flow is one-directional.
This means that the flow of code is from ts file to  Html file.
In order to achieve one-way binding, we used the property binding concept in Angular.
In property binding, we encapsulate the  variable in html with square brackets( [ ] ).


********************************************************************************************************************
app.component.ts
import { Component } from "@angular/core"; 
  
@Component({ 
  selector: "my-app", 
  templateUrl: "./app.component.html", 
  styleUrls: ["./app.component.css"], 
}) 
export class AppComponent { 
  title = "Displaying the content with one way binding"; 
}

***************************************************************************************************************
app.component.html
<h3>Displaying the content without one way binding</h3> 
  
<hr /> 
  
<h3 [textContent]="title"></h3>
app.module.ts
import { NgModule } from "@angular/core"; 
import { BrowserModule } from "@angular/platform-browser"; 
  
import { AppComponent } from "./app.component"; 
  
@NgModule({ 
  imports: [BrowserModule], 
  declarations: [AppComponent], 
  bootstrap: [AppComponent], 
}) 
export class AppModule {} 

**************************************************************************************************************************

Two-way binding:

In a two-way binding, the data flow is bi-directional.
This means that the flow of code is from ts file to Html file as well as from Html file to ts file.
In order to achieve a two-way binding, we will use ngModel or banana in a box syntax.
To make sure the app doesn’t break, we need to import ‘FormsModule’ from ‘@angular/forms.
Any changes to the view are propagated to the component class. Also, any changes to the properties in the component class are reflected in the view.
To bind two properties in order to two-way binding works, declare the ngModel directive and set it equal to the name of the property.
We will understand the concept through an example in order to make it more comprehensible.

app.component.ts
import { Component } from "@angular/core"; 
  
@Component({ 
  selector: "my-app", 
  templateUrl: "./app.component.html", 
}) 
export class AppComponent { 
  data = "Ram and Syam"; 
}
*************************************************************************************************************************

app.component.html
<input [(ngModel)]="data"  type="text"> 
  
<hr> 
  
<h3> Entered data is  {{data}}</h3> 
*******************************************************************************************

app.module.ts
import { NgModule } from "@angular/core"; 
import { BrowserModule } from "@angular/platform-browser"; 
import { FormsModule } from "@angular/forms"; 
  
import { AppComponent } from "./app.component"; 
  
@NgModule({ 
  imports: [BrowserModule, FormsModule], 
  declarations: [AppComponent], 
  bootstrap: [AppComponent], 
}) 
export class AppModule {}
******************************************************************************************

Two-way binding :--
In a two-way binding, the flow is two-directional.
This means that the flow of code is from ts file to Html file as well as from Html file to ts file.
In order to achieve a two-way binding, we will use ngModel or banana in a box syntax.
To make sure the app doesn’t break, we need to import ‘FormsModule’ from ‘@angular/forms’. Using ngModel, we will bind a variable from Html to ts file and from ts file to Html file.
To make sure the app doesn’t break, we need to import ‘FormsModule’ from ‘@angular/forms’. Using ngModel, we will bind a variable from Html to ts file and from ts file to Html file.

*******************************************************************************************************************************************************************************************
Difference between Early and Late Binding in Java
Early Binding: The binding which can be resolved at compile time by the compiler is known as static or early binding. Binding of all the static,
 private and final methods is done at compile-time. Example: 

******************************************************************************************************************************************************************

Property Binding
Property binding is a one-way data binding mechanism that allows you to set the properties for HTML elements. It involves updating a property value in the component and binding the value to an HTML element in the same view. We use property binding for toggle functionality and sharing data between components. It uses the "[]" syntax for data binding. 

Also Read: How to Learn Angular: Benefits of Angular and Certifications

In the app.component.ts file, I’ve created another property called image and provided the path to the Logo in the assets folder.

public image = "/assets/Logo.png"

In the app.component.html file.

<img [src] = "image" alt="" style="height: 100px; width: 250px" class="center">


**********************************************************************************************************************************************************************************************

Event Binding
Event binding type is when information flows from the view to the component when an event is triggered. The event could be a mouse click or keypress. The view sends the data to update the component. Unsurprisingly, it is the exact opposite of property binding, where the data goes from the component to the view.

view-event

We have created a Subscribe button that displays a “Thank you” message when clicked on. 

<br><button (click)="onClick()">Subscribe to Simplilearn</button></div>

To display the message on the console, we’ve created a function called onClick() in the app.component.ts file. 

onClick(){

    console.log("Thanks for subscribing")

  }

Every time the user clicks on the button, the message is displayed on the console. 

************************************************************************************************************************************************************

Two-way Data Binding
As the name suggests, two-way binding is a mechanism where data flows from the component to the view and back. 
This binding ensures that the component and view are always in sync. Any changes made on either end are immediately reflected on both.
 The general syntax to denote two-way data binding is a combination of Square brackets and parentheses "[()]". 

2-way

To illustrate two-way data binding, we’ve created a property with an empty string and an input box for the user to type. Whatever the user provides is displayed on the screen with the help of the property. 

In the .ts file, 

public random = ""

In the .html file, we’ve created an input field

<input [(ngModel)]="random" type="text"> <br>

  {{random}}

We have used the ngModel directive and initialized it to random. We’ve then interpolated the property random. 

***************************************************************************************************************************************************************

What is Angular NgSwitch? 
The NgSwitch directive specifies an expression to match against. The NgSwitchCase directive defines the expressions to match.

It renders every view that matches.
If there are no matches, the view with the NgSwitchDefault directive is rendered.
Elements outside of any NgSwitchCase or NgSwitchDefault directive but within the NgSwitch statement but are preserved at the location.
A Step-by-Step Guide to NgSwitch 
Now that you know what the NgSwitch directive does, let’s look at a simple demo explaining the same.

UseCase - To display a message according to the day of the week. 

Step 1 - Create a component in your Angular App folder using the command. 

ng g c <name_of_component> 

The component that was created is called newcomp.

Step2 - In the newcomp.ts file, create a day property that stores the current day of the week. 

export class NewcompComponent implements OnInit {

  constructor() { }

  public day = new Date().getDay()

    ngOnInit(): void {

  }

}

The getDay() method returns a digit corresponding to the days of the week. It returns 0 for Sunday, 1 for Monday, and so on. 

Step 3 - In the newcomp.html file, use the NgSwitch directive to display messages according to the value stored in the day property. 

<h1>Hey! Good Morning </h1>

<div [NgSwitch] = "day">

<div *NgSwitchCase = 0>Today is Sunday! You deserve a break</div>

<div *NgSwitchCase = '1'><h3>Today is Monday, Hope you have productive Week</h3></div>

<div *NgSwitchCase = '2'><h3>Today is Tuesday, Smash your Goals</h3></div>

<div *NgSwitchCase = '3'><h3>Today is Wednesday, You're already half way through</h3></div>

<div *NgSwitchCase = '4'><h3>Today is Thursday, It's like Friday Lite</h3></div>

<div *NgSwitchCase = '5'><h3>Today is Friday, TGIF!!!</h3></div>

<div *NgSwitchCase = '6'><h3>Today is Saturday, Let's Party!! :) </h3></div>

<div *NgSwitchDefault>Uh oh! Somethings wrong</div>

</div>

Step 4 - Run your app using the ng serve command. The output will look like this. 

*******************************************************************************************************************************************************************************************

Since this article was written on a Wednesday, accordingly the message is being displayed. 

Step 5 - If you wish to customize the message being displayed, you can create another property with a hard-coded value. 

public day2 = 5

**************************************************************************************************************************************************************************************

Step 6 - Let’s consider a scenario where the expression to match is invalid. In this case, it must provide a value above 7 for the day2 property. 

  public day2 = 8

Next Steps to Success
We hope that this Angular NgSwitch article helped you. If you wish to learn Angular in-depth and perhaps make a career out of it, then a certification will be helpful.

Simplilearn's Post Graduate Program in Full Stack Web Development helps you understand the design of single-page applications and how Angular facilities their development. 
This Angular certification provides knowledge of concepts such as TypeScript, Bootstrap Grid System, dependency injections, SPA, forms, pipes, promises, observables, and Angular class testing.

If you have any feedback or questions on the topic, please drop us a comment in the comments section of this article. We will get back to you ASAP!
******************************************************************************************************************************************************************************************************


What Are Angular Pipes? How Are They Implemented?

What are Angular Pipes? 
Angular Pipes transform the output. You can think of them as makeup rooms where they beautify the data into a more desirable format. 
They do not alter the data but change how they appear to the user. 

Technically, pipes are simple functions designed to accept an input value, process, and return a transformed value as the output. Angular supports many built-in pipes. However, you can also create custom pipes that suit your requirements. Some salient features include: 

Pipes are defined using the pipe “|” symbol. 
Pipes can be chained with other pipes.
Pipes can be provided with arguments by using the colon (:) sign.
Some commonly used predefined Angular pipes are: 

DatePipe: Formats a date value.
UpperCasePipe: Transforms text to uppercase.
LowerCasePipe: Transforms text to lowercase.
CurrencyPipe: Transforms a number to the currency string.
PercentPipe: Transforms a number to the percentage string. 
DecimalPipe: Transforms a number into a decimal point string.
Using Built-in Angular Pipes
As mentioned above, Angular provides several built-in pipes to beautify the data being shown on the user interface.  

In the following section, we have added the code and screenshots of a few built-in pipes like lowercase, uppercase, and slice. 

In the pipes.component.ts file, we’ve created properties for date and name. 

import { Component, OnInit } from '@angular/core';

@Component({

  selector: 'app-pipes',

  templateUrl: './pipes.component.html',

  styleUrls: ['./pipes.component.css']

})

export class PipesComponent implements OnInit {

  dateToday: string;

  name: string;

  constructor() { }

  ngOnInit(): void {

    this.dateToday = new Date().toDateString();

    this.name = "Simplilearn"

  } 

}

In Pipes.component.html, we’ve interpolated the properties and used pipes to format them.

<h1>

    Date: {{ dateToday  }} <br>

    Date Pipe: {{ dateToday | date | uppercase}}<br>

    Date Pipe: {{ dateToday | date: 'short' | lowercase}} <br>

    Name: {{ name | uppercase}} <br>

    Name: {{ name | slice:6}}

</h1>

*********************************************************************************************************
In the code mentioned above, the date property initially displays in the default format. However, when used with the date pipe, the format changes. We’ve also used other pipes like uppercase and lowercase for better understanding. 

As you can see, we have used the slice pipe for the name property. This pipe slices the text and displays it from the index position provided by the user. 

Now that you know how to use pipes and their functionalities, let us show you how to create custom pipes. 

Creating Custom Pipes
Angular makes provision to create custom pipes that convert the data in the format that you desire. Angular Pipes are TypeScript classes with the @Pipe decorator. 
The decorator has a name property in its metadata that specifies the Pipe and how and where it is used. 

Pipe implements the PipeTransform interface. As the name suggests, it receives the value and transforms it into the desired format with the help of a transform() method.

Here are the general steps to create a custom pipe:

Create a TypeScript Class with an export keyword.
Decorate it with the @Pipe decorator and pass the name property to it.
Implement the pipe transform interface in the class.
Implement the transform method imposed due to the interface.
Return the transformed data with the pipe.
Add this pipe class to the declarations array of the module where you want to use it.
Alternatively, you can use the following command, 

ng g pipe <nameofthepipe>

The pipe.ts file holds the following code. 

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({

  name: 'demopipe'

})

export class DemopipePipe implements PipeTransform {

  transform(value: unknown, ...args: unknown[]): unknown {

    return null;

  }

}

As you can see, the PipeTransform interface and the transform method have been created. We’ve highlighted it for better understanding.

For the demo purpose, we have created a pipe that reverses a given string.

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({

  name: 'reverse'

})

export class ReversePipe implements PipeTransform {

  nvalue: string

  transform(value: any, ...args): any {

  this.nvalue = value.split('').reverse().join('');

    return this.nvalue;

  }

}

Now in our app.component.html “ I” display a string and it is reverse using the pipe name 

<h3>

  The reverse of string is {{ "string" | reverse}}

</h3>

You can also join multiple pipes 

<h3>

  The reverse of string is {{ "string" | reverse | uppercase}}

</h3>

**************************************************************************************************************************

Pure and Impure Pipes 
Pipes in Angular are classified into Pure and Impure types. Let’s have a closer look at them. 

Pure Pipes
These pipes use pure functions. As a result of this, the pipe doesn’t use any internal state and the output remains the same as long as the parameters passed remain the same. Angular calls the pipe only when it detects a change in the parameters being passed. A single instance of the pure pipe is used throughout all components. 

Impure Pipes
An impure pipe in Angular is called for every change detection cycle regardless of the change in the input fields. Multiple pipe instances are created for these pipes and the inputs passed to these pipes are mutable. 

Although by default pipes are pure, you can specify impure pipes using the pure property as shown below.

@Pipe({

  name: 'demopipe',

  pure : true/false 

})

export class DemopipePipe implements PipeTransform {

This brings us to the end of the article. We highly suggest that you play around with pipes to get a better understanding of the concept. 

Next Steps
We hope that this article on Angular Pipes has helped you understand how to use and create pipes. If you are looking to get advanced training in Angular and perhaps make a career out of it, then you should consider getting a certification for the same.

If you have any feedback or questions on the topic, feel free to drop us a comment in the comments section of this article. We will get back to you ASAP! 

















